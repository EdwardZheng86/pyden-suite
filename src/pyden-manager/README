PyDen

Overview
The PyDen app aims to bring the ability to choose the Python interpreter used by custom Python scripts in Splunk.
This is achieved by downloading, building, and distributing full Python intallations and virtual environments. This is
accomplished through two apps: the PyDen Manager and PyDen. PyDen is a simple container app for holding the Python
builds and virtual environments to be used by other Splunk apps. The PyDen Manager contains the tools needed to
download and build the installations and virtual environments. Once built, the distributions and virtual environments
will be written to the PyDen app for use.

Version Support
Splunk Enterprise 7.2+

System Requirements
The app builds Python from source and therefore the Operating System must have a compiler and packages needed in order
to build Python. Please refer to the documentation for your Operating System for needed packages. The only options
included in the ./configure command during the Python build process are "--enable-optimizations" (if configured) and
"--with-ensurepip=install".

Installation and Configuration
In a single Search Head environment, PyDen Manager and PyDen are installed together in the SPLUNK_HOME/etc/apps
directory. In a Search Head Cluster, the PyDen Manager is installed onto the Deployer and the PyDen app is placed
in the SPLUNK_HOME/etc/shcluster/apps directory for distribution out to the cluster. The location of PyDen in the
filesystem needs to be specified in the PyDen Manager pyden.conf file under the app stanza with the location attribute.
For example:
    [app]
    location = /opt/splunk/etc/apps/pyden

Commands
* createdist
    Syntax: createdist <version> [<download>]

    Required arguments:
    version - The version of the Python distribution to be built.

    Optional arguments:
    download - The name of the file downloaded and placed in the build directory.

    Usage
    This command is used to build a Python distribution from source. The required argument specifies the version to be
    built. The optional argument is the name of the compressed tarball (.tgz) placed in the build directory. If the
    optional argument is not supplied, a compressed tarball will be downloaded from www.python.org. Compatible with
    Python version 3.5+ and 2.7.

* createvenv
    Syntax: createvenv version=<version> name=<name>

    Required arguments:
    version - The version of Python to create a virtual environemnt from.
    name - The name of the virtual environment.

    Usage
    This command is used to create a Python virtual environment using the provided version and name.

* pip
    Syntax: pip type=<env-type> name=<env-label> <pip-commands>

    Required arguments:
    env-type - The type of environment to install to. Possible options: dist | venv
    env-label - The name of the environment to install to. For dist, this will be the Python version in the dist
        directory of PyDen. For venv, this will be the name of the virtual environment.
    pip-commands - series of pip compliant commands and arguments.

Usage
Using a virtual environment created by the PyDen-Manager app is done through the activate.py script found in the PyDen
app. Within the activate.py script there is a function called "activate_venv_or_die" which takes a single argument
which is the name of a virtual environment created through the app (and found in the pyden.conf file in the PyDen app).
This function should be called at the top of a script that needs to run under the needed environment.

    from activate import activate_venv_or_die
    activate_venv_or_die(environment_name)

If there is a default environment defined in pyden.conf, for example:
    [default]
    environment = my_py_3

    [my_py_3]
    executable = my_py_3_directory/bin/python
Then this environment can be activated by only importing the activate module.

    import activate

If a script that uses a defined virtual environment resides within a different app (not in pyden/bin), then you will
need to copy the activate.py script into your app for proper importing.
